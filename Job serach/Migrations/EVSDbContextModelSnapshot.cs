// <auto-generated />
using System;
using Job_serach.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Job_serach.Migrations
{
    [DbContext(typeof(EVSDbContext))]
    partial class EVSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Job_serach.Models.Address", b =>
                {
                    b.Property<int>("DistrictID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictID"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Job_serach.Models.Candidate_type", b =>
                {
                    b.Property<int>("CandidateTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateTypeID"), 1L, 1);

                    b.Property<string>("CandidateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidateTypeID");

                    b.ToTable("Candidate_types");
                });

            modelBuilder.Entity("Job_serach.Models.Result", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultID"), 1L, 1);

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<int>("PartyID")
                        .HasColumnType("int");

                    b.Property<int>("addressDistrictID")
                        .HasColumnType("int");

                    b.Property<string>("addressFK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("candidateFK")
                        .HasColumnType("int");

                    b.Property<int>("partyFK")
                        .HasColumnType("int");

                    b.Property<int>("vote_count")
                        .HasColumnType("int");

                    b.HasKey("ResultID");

                    b.HasIndex("CandidateID");

                    b.HasIndex("PartyID");

                    b.HasIndex("addressDistrictID");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Job_serach.Models.candidate", b =>
                {
                    b.Property<int>("CandidateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateID"), 1L, 1);

                    b.Property<int>("Candidate_typeFK")
                        .HasColumnType("int");

                    b.Property<int>("address1FK")
                        .HasColumnType("int");

                    b.Property<int>("candidate_typeFK")
                        .HasColumnType("int");

                    b.Property<int>("electionFK")
                        .HasColumnType("int");

                    b.Property<int>("partyFK")
                        .HasColumnType("int");

                    b.Property<string>("voterFK")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CandidateID");

                    b.HasIndex("Candidate_typeFK");

                    b.HasIndex("address1FK");

                    b.HasIndex("electionFK");

                    b.HasIndex("partyFK");

                    b.HasIndex("voterFK");

                    b.ToTable("candidates");
                });

            modelBuilder.Entity("Job_serach.Models.election", b =>
                {
                    b.Property<int>("ElectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElectionID"), 1L, 1);

                    b.Property<string>("ElectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ElectionID");

                    b.ToTable("elections");
                });

            modelBuilder.Entity("Job_serach.Models.party", b =>
                {
                    b.Property<int>("PartyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartyID"), 1L, 1);

                    b.Property<string>("PartyLeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PartyID");

                    b.HasIndex("PartyName", "Symbol");

                    b.ToTable("partys");
                });

            modelBuilder.Entity("Job_serach.Models.user", b =>
                {
                    b.Property<string>("VoterID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AADHAAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Def_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<int>("usertypeidFK")
                        .HasColumnType("int");

                    b.Property<string>("voter2AADHAAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("voter2FK")
                        .HasColumnType("int");

                    b.HasKey("VoterID");

                    b.HasIndex("UserTypeID");

                    b.HasIndex("voter2AADHAAR");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Job_serach.Models.user_type", b =>
                {
                    b.Property<int>("UserTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeID"), 1L, 1);

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserTypeID");

                    b.ToTable("user_type");
                });

            modelBuilder.Entity("Job_serach.Models.vote", b =>
                {
                    b.Property<string>("VoteID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<int>("PartyID")
                        .HasColumnType("int");

                    b.Property<string>("VoterID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("candidateIDFK")
                        .HasColumnType("int");

                    b.Property<string>("def_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("disctrictIDFK")
                        .HasColumnType("int");

                    b.Property<string>("enter_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("partyIDFK")
                        .HasColumnType("int");

                    b.Property<string>("voterIDFK")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VoteID");

                    b.HasIndex("CandidateID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("PartyID");

                    b.HasIndex("VoterID");

                    b.HasIndex("voterIDFK")
                        .IsUnique();

                    b.ToTable("votes");
                });

            modelBuilder.Entity("Job_serach.Models.voter", b =>
                {
                    b.Property<string>("AADHAAR")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthdayDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictID1DistrictID")
                        .HasColumnType("int");

                    b.Property<int>("DistrictID1FK")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AADHAAR");

                    b.HasIndex("DistrictID1DistrictID");

                    b.ToTable("voters");
                });

            modelBuilder.Entity("Job_serach.Models.Result", b =>
                {
                    b.HasOne("Job_serach.Models.candidate", "candidate")
                        .WithMany()
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_serach.Models.party", "party")
                        .WithMany()
                        .HasForeignKey("PartyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_serach.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressDistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("candidate");

                    b.Navigation("party");
                });

            modelBuilder.Entity("Job_serach.Models.candidate", b =>
                {
                    b.HasOne("Job_serach.Models.Candidate_type", "candidate_type")
                        .WithMany()
                        .HasForeignKey("Candidate_typeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_serach.Models.Address", "address1")
                        .WithMany()
                        .HasForeignKey("address1FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_serach.Models.election", "election")
                        .WithMany()
                        .HasForeignKey("electionFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_serach.Models.party", "party")
                        .WithMany()
                        .HasForeignKey("partyFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_serach.Models.voter", "voter")
                        .WithMany()
                        .HasForeignKey("voterFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("address1");

                    b.Navigation("candidate_type");

                    b.Navigation("election");

                    b.Navigation("party");

                    b.Navigation("voter");
                });

            modelBuilder.Entity("Job_serach.Models.user", b =>
                {
                    b.HasOne("Job_serach.Models.user_type", "usertypeid")
                        .WithMany()
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_serach.Models.voter", "voter2")
                        .WithMany()
                        .HasForeignKey("voter2AADHAAR")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usertypeid");

                    b.Navigation("voter2");
                });

            modelBuilder.Entity("Job_serach.Models.vote", b =>
                {
                    b.HasOne("Job_serach.Models.candidate", "candidateID")
                        .WithMany()
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_serach.Models.Address", "districtID")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_serach.Models.party", "partyID")
                        .WithMany()
                        .HasForeignKey("PartyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_serach.Models.user", "voterID")
                        .WithMany()
                        .HasForeignKey("VoterID");

                    b.Navigation("candidateID");

                    b.Navigation("districtID");

                    b.Navigation("partyID");

                    b.Navigation("voterID");
                });

            modelBuilder.Entity("Job_serach.Models.voter", b =>
                {
                    b.HasOne("Job_serach.Models.Address", "DistrictID1")
                        .WithMany()
                        .HasForeignKey("DistrictID1DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistrictID1");
                });
#pragma warning restore 612, 618
        }
    }
}
